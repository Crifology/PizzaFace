{"version":3,"file":"waveform-data.js","sources":["../src/waveform-data-channel.js","../src/waveform-generator.js","../src/waveform-utils.js","../src/waveform-data.js"],"sourcesContent":["/**\n * Provides access to the waveform data for a single audio channel.\n */\n\nfunction WaveformDataChannel(waveformData, channelIndex) {\n  this._waveformData = waveformData;\n  this._channelIndex = channelIndex;\n}\n\n/**\n * Returns the waveform minimum at the given index position.\n */\n\nWaveformDataChannel.prototype.min_sample = function(index) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2;\n\n  return this._waveformData._at(offset);\n};\n\n/**\n * Returns the waveform maximum at the given index position.\n */\n\nWaveformDataChannel.prototype.max_sample = function(index) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2 + 1;\n\n  return this._waveformData._at(offset);\n};\n\n/**\n * Sets the waveform minimum at the given index position.\n */\n\nWaveformDataChannel.prototype.set_min_sample = function(index, sample) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2;\n\n  return this._waveformData._set_at(offset, sample);\n};\n\n/**\n * Sets the waveform maximum at the given index position.\n */\n\nWaveformDataChannel.prototype.set_max_sample = function(index, sample) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2 + 1;\n\n  return this._waveformData._set_at(offset, sample);\n};\n\n/**\n * Returns all the waveform minimum values as an array.\n */\n\nWaveformDataChannel.prototype.min_array = function() {\n  return this._waveformData._offsetValues(\n    0,\n    this._waveformData.length,\n    this._channelIndex * 2\n  );\n};\n\n/**\n * Returns all the waveform maximum values as an array.\n */\n\nWaveformDataChannel.prototype.max_array = function() {\n  return this._waveformData._offsetValues(\n    0,\n    this._waveformData.length,\n    this._channelIndex * 2 + 1\n  );\n};\n\nexport default WaveformDataChannel;\n","/**\n * AudioBuffer-based WaveformData generator\n *\n * Adapted from BlockFile::CalcSummary in Audacity, with permission.\n * See https://code.google.com/p/audacity/source/browse/audacity-src/trunk/src/BlockFile.cpp\n */\n\n var INT8_MAX = 127;\n var INT8_MIN = -128;\n\n function calculateWaveformDataLength(audio_sample_count, scale) {\n   var data_length = Math.floor(audio_sample_count / scale);\n\n   var samples_remaining = audio_sample_count - (data_length * scale);\n\n   if (samples_remaining > 0) {\n     data_length++;\n   }\n\n   return data_length;\n }\n\nfunction generateWaveformData(options) {\n  var scale = options.scale;\n  var amplitude_scale = options.amplitude_scale;\n  var split_channels = options.split_channels;\n  var length = options.length;\n  var sample_rate = options.sample_rate;\n  var channels = options.channels.map(function(channel) {\n    return new Float32Array(channel);\n  });\n  var output_channels = split_channels ? channels.length : 1;\n  var version = output_channels === 1 ? 1 : 2;\n  var header_size = version === 1 ? 20 : 24;\n  var data_length = calculateWaveformDataLength(length, scale);\n  var total_size = header_size + data_length * 2 * output_channels;\n  var buffer = new ArrayBuffer(total_size);\n  var data_view = new DataView(buffer);\n\n  var scale_counter = 0;\n  var offset = header_size;\n  var channel, i;\n\n  var min_value = new Array(output_channels);\n  var max_value = new Array(output_channels);\n\n  for (channel = 0; channel < output_channels; channel++) {\n    min_value[channel] = Infinity;\n    max_value[channel] = -Infinity;\n  }\n\n  data_view.setInt32(0, version, true); // Version\n  data_view.setUint32(4, 1, true); // Is 8 bit?\n  data_view.setInt32(8, sample_rate, true); // Sample rate\n  data_view.setInt32(12, scale, true); // Scale\n  data_view.setInt32(16, data_length, true); // Length\n\n  if (version === 2) {\n    data_view.setInt32(20, output_channels, true);\n  }\n\n  for (i = 0; i < length; i++) {\n    var sample = 0;\n\n    if (output_channels === 1) {\n      for (channel = 0; channel < channels.length; ++channel) {\n        sample += channels[channel][i];\n      }\n\n      sample = Math.floor(INT8_MAX * sample * amplitude_scale / channels.length);\n\n      if (sample < min_value[0]) {\n        min_value[0] = sample;\n\n        if (min_value[0] < INT8_MIN) {\n          min_value[0] = INT8_MIN;\n        }\n      }\n\n      if (sample > max_value[0]) {\n        max_value[0] = sample;\n\n        if (max_value[0] > INT8_MAX) {\n          max_value[0] = INT8_MAX;\n        }\n      }\n    }\n    else {\n      for (channel = 0; channel < output_channels; ++channel) {\n        sample = Math.floor(INT8_MAX * channels[channel][i] * amplitude_scale);\n\n        if (sample < min_value[channel]) {\n          min_value[channel] = sample;\n\n          if (min_value[channel] < INT8_MIN) {\n            min_value[channel] = INT8_MIN;\n          }\n        }\n\n        if (sample > max_value[channel]) {\n          max_value[channel] = sample;\n\n          if (max_value[channel] > INT8_MAX) {\n            max_value[channel] = INT8_MAX;\n          }\n        }\n      }\n    }\n\n    if (++scale_counter === scale) {\n      for (channel = 0; channel < output_channels; channel++) {\n        data_view.setInt8(offset++, min_value[channel]);\n        data_view.setInt8(offset++, max_value[channel]);\n\n        min_value[channel] = Infinity;\n        max_value[channel] = -Infinity;\n      }\n\n      scale_counter = 0;\n    }\n  }\n\n  if (scale_counter > 0) {\n    for (channel = 0; channel < output_channels; channel++) {\n      data_view.setInt8(offset++, min_value[channel]);\n      data_view.setInt8(offset++, max_value[channel]);\n    }\n  }\n\n  return buffer;\n}\n\nexport { generateWaveformData };\n","export function isJsonWaveformData(data) {\n  return data &&\n    typeof data === \"object\" &&\n    \"sample_rate\" in data &&\n    \"samples_per_pixel\" in data &&\n    \"bits\" in data &&\n    \"length\" in data &&\n    \"data\" in data;\n}\n\nexport function isBinaryWaveformData(data) {\n  var isCompatible = data && typeof data === \"object\" && \"byteLength\" in data;\n\n  if (isCompatible) {\n    var view = new DataView(data);\n    var version = view.getInt32(0, true);\n\n    if (version !== 1 && version !== 2) {\n      throw new TypeError(\"WaveformData.create(): This waveform data version not supported\");\n    }\n  }\n\n  return isCompatible;\n}\n\nexport function convertJsonToBinary(data) {\n  var waveformData = data.data;\n  var channels = data.channels || 1;\n  var header_size = 24; // version 2\n  var bytes_per_sample = data.bits === 8 ? 1 : 2;\n  var expected_length = data.length * 2 * channels;\n\n  if (waveformData.length !== expected_length) {\n    throw new Error(\"WaveformData.create(): Length mismatch in JSON waveform data\");\n  }\n\n  var total_size = header_size + waveformData.length * bytes_per_sample;\n\n  var array_buffer = new ArrayBuffer(total_size);\n  var data_object = new DataView(array_buffer);\n\n  data_object.setInt32(0, 2, true); // Version\n  data_object.setUint32(4, data.bits === 8, true);\n  data_object.setInt32(8, data.sample_rate, true);\n  data_object.setInt32(12, data.samples_per_pixel, true);\n  data_object.setInt32(16, data.length, true);\n  data_object.setInt32(20, channels, true);\n\n  var index = header_size;\n\n  var i;\n\n  if (data.bits === 8) {\n    for (i = 0; i < waveformData.length; i++) {\n      data_object.setInt8(index++, waveformData[i], true);\n    }\n  }\n  else {\n    for (i = 0; i < waveformData.length; i++) {\n      data_object.setInt16(index, waveformData[i], true);\n\n      index += 2;\n    }\n  }\n\n  return array_buffer;\n}\n","import WaveformDataChannel from \"./waveform-data-channel\";\nimport { generateWaveformData } from \"./waveform-generator\";\nimport { isJsonWaveformData, isBinaryWaveformData, convertJsonToBinary } from \"./waveform-utils\";\nimport WaveformDataWorker from \"web-worker:./waveform-data-worker\";\n\n/**\n * Provides access to waveform data.\n */\n\nfunction WaveformData(data) {\n  if (isJsonWaveformData(data)) {\n    data = convertJsonToBinary(data);\n  }\n\n  if (isBinaryWaveformData(data)) {\n    this._data = new DataView(data);\n    this._offset = this._version() === 2 ? 24 : 20;\n\n    this._channels = [];\n\n    for (var channel = 0; channel < this.channels; channel++) {\n      this._channels[channel] = new WaveformDataChannel(this, channel);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"WaveformData.create(): Unknown data format\"\n    );\n  }\n}\n\nvar defaultOptions = {\n  scale: 512,\n  amplitude_scale: 1.0,\n  split_channels: false,\n  disable_worker: false\n};\n\nfunction getOptions(options) {\n  var opts = {\n    scale: options.scale || defaultOptions.scale,\n    amplitude_scale: options.amplitude_scale || defaultOptions.amplitude_scale,\n    split_channels: options.split_channels || defaultOptions.split_channels,\n    disable_worker: options.disable_worker || defaultOptions.disable_worker\n  };\n\n  return opts;\n}\n\nfunction getChannelData(audio_buffer) {\n  var channels = [];\n\n  for (var i = 0; i < audio_buffer.numberOfChannels; ++i) {\n    channels.push(audio_buffer.getChannelData(i).buffer);\n  }\n\n  return channels;\n}\n\nfunction createFromAudioBuffer(audio_buffer, options, callback) {\n  var channels = getChannelData(audio_buffer);\n\n  if (options.disable_worker) {\n    var buffer = generateWaveformData({\n      scale: options.scale,\n      amplitude_scale: options.amplitude_scale,\n      split_channels: options.split_channels,\n      length: audio_buffer.length,\n      sample_rate: audio_buffer.sampleRate,\n      channels: channels\n    });\n\n    callback(null, new WaveformData(buffer), audio_buffer);\n  }\n  else {\n    var worker = new WaveformDataWorker();\n\n    worker.onmessage = function(evt) {\n      callback(null, new WaveformData(evt.data), audio_buffer);\n    };\n\n    worker.postMessage({\n      scale: options.scale,\n      amplitude_scale: options.amplitude_scale,\n      split_channels: options.split_channels,\n      length: audio_buffer.length,\n      sample_rate: audio_buffer.sampleRate,\n      channels: channels\n    }, channels);\n  }\n}\n\nfunction createFromArrayBuffer(audioContext, audioData, options, callback) {\n  // The following function is a workaround for a Webkit bug where decodeAudioData\n  // invokes the errorCallback with null instead of a DOMException.\n  // See https://webaudio.github.io/web-audio-api/#dom-baseaudiocontext-decodeaudiodata\n  // and http://stackoverflow.com/q/10365335/103396\n\n  function errorCallback(error) {\n    if (!error) {\n      error = new DOMException(\"EncodingError\");\n    }\n\n    callback(error);\n  }\n\n  audioContext.decodeAudioData(\n    audioData,\n    function(audio_buffer) {\n      createFromAudioBuffer(audio_buffer, options, callback);\n    },\n    errorCallback\n  );\n}\n\n/**\n * Creates and returns a WaveformData instance from the given waveform data.\n */\n\nWaveformData.create = function create(data) {\n  return new WaveformData(data);\n};\n\n/**\n * Creates a WaveformData instance from audio.\n */\n\nWaveformData.createFromAudio = function(options, callback) {\n  var opts = getOptions(options);\n\n  if (options.audio_context && options.array_buffer) {\n    return createFromArrayBuffer(options.audio_context, options.array_buffer, opts, callback);\n  }\n  else if (options.audio_buffer) {\n    return createFromAudioBuffer(options.audio_buffer, opts, callback);\n  }\n  else {\n    throw new TypeError(\n      // eslint-disable-next-line\n      \"WaveformData.createFromAudio(): Pass either an AudioContext and ArrayBuffer, or an AudioBuffer object\"\n    );\n  }\n};\n\nWaveformData.prototype = {\n\n  /**\n   * Creates and returns a new WaveformData object with resampled data.\n   * Use this method to create waveform data at different zoom levels.\n   *\n   * Adapted from Sequence::GetWaveDisplay in Audacity, with permission.\n   * https://code.google.com/p/audacity/source/browse/audacity-src/trunk/src/Sequence.cpp\n   */\n\n  resample: function(options) {\n    options.scale = typeof options.scale === \"number\" ? options.scale : null;\n    options.width = typeof options.width === \"number\" ? options.width : null;\n\n    if (options.width != null && options.width <= 0) {\n      throw new RangeError(\"WaveformData.resample(): width should be a positive integer value\");\n    }\n\n    if (options.scale != null && options.scale <= 0) {\n      throw new RangeError(\"WaveformData.resample(): scale should be a positive integer value\");\n    }\n\n    if (!options.scale && !options.width) {\n      throw new Error(\"WaveformData.resample(): Missing scale or width option\");\n    }\n\n    // Scale we want to reach\n    var output_samples_per_pixel = options.scale ||\n      Math.floor(this.duration * this.sample_rate / options.width);\n    var scale = this.scale; // scale we are coming from\n\n    // The amount of data we want to resample i.e. final zoom want to resample\n    // all data but for intermediate zoom we want to resample subset\n    var input_buffer_size = this.length;\n\n    var input_buffer_length_samples = input_buffer_size * this.scale;\n    var output_buffer_length_samples =\n      Math.ceil(input_buffer_length_samples / output_samples_per_pixel);\n\n    var output_header_size = 24; // version 2\n    var bytes_per_sample = this.bits === 8 ? 1 : 2;\n    var total_size = output_header_size\n                   + output_buffer_length_samples * 2 * this.channels * bytes_per_sample;\n    var output_data = new ArrayBuffer(total_size);\n    var output_dataview = new DataView(output_data);\n\n    output_dataview.setInt32(0, 2, true); // Version\n    output_dataview.setUint32(4, this.bits === 8, true); // Is 8 bit?\n    output_dataview.setInt32(8, this.sample_rate, true);\n    output_dataview.setInt32(12, output_samples_per_pixel, true);\n    output_dataview.setInt32(16, output_buffer_length_samples, true);\n    output_dataview.setInt32(20, this.channels, true);\n\n    var waveform_data = new WaveformData(output_data);\n\n    var input_index = 0;\n    var output_index = 0;\n\n    var channels = this.channels;\n\n    var min = new Array(channels);\n    var max = new Array(channels);\n\n    var channel;\n\n    for (channel = 0; channel < channels; ++channel) {\n      if (input_buffer_size > 0) {\n        min[channel] = this.channel(channel).min_sample(input_index);\n        max[channel] = this.channel(channel).max_sample(input_index);\n      }\n      else {\n        min[channel] = 0;\n        max[channel] = 0;\n      }\n    }\n\n    var min_value = this.bits === 8 ? -128 : -32768;\n    var max_value = this.bits === 8 ?  127 :  32767;\n\n    if (output_samples_per_pixel < scale) {\n      throw new Error(\n        \"WaveformData.resample(): Zoom level \" + output_samples_per_pixel +\n        \" too low, minimum: \" + scale\n      );\n    }\n\n    var where, prev_where, stop, value, last_input_index;\n\n    function sample_at_pixel(x) {\n      return Math.floor(x * output_samples_per_pixel);\n    }\n\n    while (input_index < input_buffer_size) {\n      while (Math.floor(sample_at_pixel(output_index) / scale) === input_index) {\n        if (output_index > 0) {\n          for (channel = 0; channel < channels; ++channel) {\n            waveform_data.channel(channel).set_min_sample(output_index - 1, min[channel]);\n            waveform_data.channel(channel).set_max_sample(output_index - 1, max[channel]);\n          }\n        }\n\n        last_input_index = input_index;\n\n        output_index++;\n\n        where      = sample_at_pixel(output_index);\n        prev_where = sample_at_pixel(output_index - 1);\n\n        if (where !== prev_where) {\n          for (channel = 0; channel < channels; ++channel) {\n            min[channel] = max_value;\n            max[channel] = min_value;\n          }\n        }\n      }\n\n      where = sample_at_pixel(output_index);\n      stop = Math.floor(where / scale);\n\n      if (stop > input_buffer_size) {\n        stop = input_buffer_size;\n      }\n\n      while (input_index < stop) {\n        for (channel = 0; channel < channels; ++channel) {\n          value = this.channel(channel).min_sample(input_index);\n\n          if (value < min[channel]) {\n            min[channel] = value;\n          }\n\n          value = this.channel(channel).max_sample(input_index);\n\n          if (value > max[channel]) {\n            max[channel] = value;\n          }\n        }\n\n        input_index++;\n      }\n    }\n\n    if (input_index !== last_input_index) {\n      for (channel = 0; channel < channels; ++channel) {\n        waveform_data.channel(channel).set_min_sample(output_index - 1, min[channel]);\n        waveform_data.channel(channel).set_max_sample(output_index - 1, max[channel]);\n      }\n    }\n\n    return waveform_data;\n  },\n\n  /**\n   * Concatenates with one or more other waveforms, returning a new WaveformData object.\n   */\n\n  concat: function() {\n    var self = this;\n    var otherWaveforms = Array.prototype.slice.call(arguments);\n\n    // Check that all the supplied waveforms are compatible\n    otherWaveforms.forEach(function(otherWaveform) {\n      if (self.channels !== otherWaveform.channels ||\n        self.sample_rate !== otherWaveform.sample_rate ||\n        self.bits !== otherWaveform.bits ||\n        self.scale !== otherWaveform.scale) {\n        throw new Error(\"WaveformData.concat(): Waveforms are incompatible\");\n      }\n    });\n\n    var combinedBuffer = this._concatBuffers.apply(this, otherWaveforms);\n\n    return WaveformData.create(combinedBuffer);\n  },\n\n  /**\n   * Returns a new ArrayBuffer with the concatenated waveform.\n   * All waveforms must have identical metadata (version, channels, etc)\n   */\n\n  _concatBuffers: function() {\n    var otherWaveforms = Array.prototype.slice.call(arguments);\n    var headerSize = this._offset;\n    var totalSize = headerSize;\n    var totalDataLength = 0;\n    var bufferCollection = [this].concat(otherWaveforms).map(function(w) {\n      return w._data.buffer;\n    });\n    var i, buffer;\n\n    for (i = 0; i < bufferCollection.length; i++) {\n      buffer = bufferCollection[i];\n      var dataSize = new DataView(buffer).getInt32(16, true);\n\n      totalSize += buffer.byteLength - headerSize;\n      totalDataLength += dataSize;\n    }\n\n    var totalBuffer = new ArrayBuffer(totalSize);\n    var sourceHeader = new DataView(bufferCollection[0]);\n    var totalBufferView = new DataView(totalBuffer);\n\n    // Copy the header from the first chunk\n    for (i = 0; i < headerSize; i++) {\n      totalBufferView.setUint8(i, sourceHeader.getUint8(i));\n    }\n    // Rewrite the data-length header item to reflect all of the samples concatenated together\n    totalBufferView.setInt32(16, totalDataLength, true);\n\n    var offset = 0;\n    var dataOfTotalBuffer = new Uint8Array(totalBuffer, headerSize);\n\n    for (i = 0; i < bufferCollection.length; i++) {\n      buffer = bufferCollection[i];\n      dataOfTotalBuffer.set(new Uint8Array(buffer, headerSize), offset);\n      offset += buffer.byteLength - headerSize;\n    }\n\n    return totalBuffer;\n  },\n\n  /**\n   * Return the unpacked values for a particular offset.\n   */\n\n  _offsetValues: function getOffsetValues(start, length, correction) {\n    var values = [];\n    var channels = this.channels;\n\n    correction += (start * channels * 2); // offset the positioning query\n\n    for (var i = 0; i < length; i++) {\n      values.push(this._at((i * channels * 2) + correction));\n    }\n\n    return values;\n  },\n\n  /**\n   * Returns the data format version number.\n   */\n\n  _version: function() {\n    return this._data.getInt32(0, true);\n  },\n\n  /**\n   * Returns the length of the waveform, in pixels.\n   */\n\n  get length() {\n    return this._data.getUint32(16, true);\n  },\n\n  /**\n   * Returns the number of bits per sample, either 8 or 16.\n   */\n\n  get bits() {\n    var bits = Boolean(this._data.getUint32(4, true));\n\n    return bits ? 8 : 16;\n  },\n\n  /**\n   * Returns the (approximate) duration of the audio file, in seconds.\n   */\n\n  get duration() {\n    return this.length * this.scale / this.sample_rate;\n  },\n\n  /**\n   * Returns the number of pixels per second.\n   */\n\n  get pixels_per_second() {\n    return this.sample_rate / this.scale;\n  },\n\n  /**\n   * Returns the amount of time represented by a single pixel, in seconds.\n   */\n\n  get seconds_per_pixel() {\n    return this.scale / this.sample_rate;\n  },\n\n  /**\n   * Returns the number of waveform channels.\n   */\n\n  get channels() {\n    if (this._version() === 2) {\n      return this._data.getInt32(20, true);\n    }\n    else {\n      return 1;\n    }\n  },\n\n  /**\n   * Returns a waveform channel.\n   */\n\n  channel: function(index) {\n    if (index >= 0 && index < this._channels.length) {\n      return this._channels[index];\n    }\n    else {\n      throw new RangeError(\"Invalid channel: \" + index);\n    }\n  },\n\n  /**\n   * Returns the number of audio samples per second.\n   */\n\n  get sample_rate() {\n    return this._data.getInt32(8, true);\n  },\n\n  /**\n   * Returns the number of audio samples per pixel.\n   */\n\n  get scale() {\n    return this._data.getInt32(12, true);\n  },\n\n  /**\n   * Returns a waveform data value at a specific offset.\n   */\n\n  _at: function at_sample(index) {\n    if (this.bits === 8) {\n      return this._data.getInt8(this._offset + index);\n    }\n    else {\n      return this._data.getInt16(this._offset + index * 2, true);\n    }\n  },\n\n  /**\n   * Sets a waveform data value at a specific offset.\n   */\n\n  _set_at: function set_at(index, sample) {\n    if (this.bits === 8) {\n      return this._data.setInt8(this._offset + index, sample);\n    }\n    else {\n      return this._data.setInt16(this._offset + index * 2, sample, true);\n    }\n  },\n\n  /**\n   * Returns the waveform data index position for a given time.\n   */\n\n  at_time: function at_time(time) {\n    return Math.floor(time * this.sample_rate / this.scale);\n  },\n\n  /**\n   * Returns the time in seconds for a given index.\n   */\n\n  time: function time(index) {\n    return index * this.scale / this.sample_rate;\n  },\n\n  /**\n   * Returns an object containing the waveform data.\n   */\n\n  toJSON: function() {\n    const waveform = {\n      version: 2,\n      channels: this.channels,\n      sample_rate: this.sample_rate,\n      samples_per_pixel: this.scale,\n      bits: this.bits,\n      length: this.length,\n      data: []\n    };\n\n    for (var i = 0; i < this.length; i++) {\n      for (var channel = 0; channel < this.channels; channel++) {\n        waveform.data.push(this.channel(channel).min_sample(i));\n        waveform.data.push(this.channel(channel).max_sample(i));\n      }\n    }\n\n    return waveform;\n  },\n\n  /**\n   * Returns the waveform data in binary format as an ArrayBuffer.\n   */\n\n  toArrayBuffer: function() {\n    return this._data.buffer;\n  }\n};\n\nexport default WaveformData;\n"],"names":["WaveformDataChannel","waveformData","channelIndex","_waveformData","_channelIndex","prototype","min_sample","index","offset","channels","_at","max_sample","set_min_sample","sample","_set_at","set_max_sample","min_array","_offsetValues","length","max_array","INT8_MAX","INT8_MIN","calculateWaveformDataLength","audio_sample_count","scale","data_length","Math","floor","samples_remaining","generateWaveformData","options","amplitude_scale","split_channels","sample_rate","map","channel","Float32Array","output_channels","version","header_size","total_size","buffer","ArrayBuffer","data_view","DataView","scale_counter","i","min_value","Array","max_value","Infinity","setInt32","setUint32","setInt8","isJsonWaveformData","data","isBinaryWaveformData","isCompatible","view","getInt32","TypeError","convertJsonToBinary","bytes_per_sample","bits","expected_length","Error","array_buffer","data_object","samples_per_pixel","setInt16","WaveformData","_data","_offset","_version","_channels","defaultOptions","disable_worker","getOptions","opts","getChannelData","audio_buffer","numberOfChannels","push","createFromAudioBuffer","callback","sampleRate","worker","WaveformDataWorker","onmessage","evt","postMessage","createFromArrayBuffer","audioContext","audioData","errorCallback","error","DOMException","decodeAudioData","create","createFromAudio","audio_context","resample","width","RangeError","output_samples_per_pixel","duration","input_buffer_size","input_buffer_length_samples","output_buffer_length_samples","ceil","output_header_size","output_data","output_dataview","waveform_data","input_index","output_index","min","max","where","prev_where","stop","value","last_input_index","sample_at_pixel","x","concat","self","otherWaveforms","slice","call","arguments","forEach","otherWaveform","combinedBuffer","_concatBuffers","apply","headerSize","totalSize","totalDataLength","bufferCollection","w","dataSize","byteLength","totalBuffer","sourceHeader","totalBufferView","setUint8","getUint8","dataOfTotalBuffer","Uint8Array","set","getOffsetValues","start","correction","values","getUint32","Boolean","pixels_per_second","seconds_per_pixel","at_sample","getInt8","getInt16","set_at","at_time","time","toJSON","waveform","toArrayBuffer"],"mappings":"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"}